{
  "version": 3,
  "sources": ["../src/lib/linear-gradient.ts", "../src/assets/bg-gradient.ts", "../src/lib/easing.ts", "../src/lib/logger.ts", "../src/assets/logo.ts", "../src/lib/calc.ts", "../src/lib/frame-animation.ts", "../src/assets/perspective-grid.ts", "../src/assets/shadow-gradient.ts", "../src/assets/starfield.ts", "../src/lib/timing.ts", "../src/bs80-animation.ts", "../src/index.ts"],
  "sourcesContent": ["import type { Rect, RgbColor } from \"./abstractions.js\";\r\n\r\ntype ColorStop = [offset: number, color: RgbColor];\r\n\r\nexport interface ILinearGradient {\r\n    create(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): CanvasGradient;\r\n    render(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): void;\r\n}\r\n\r\nexport class LinearGradient implements ILinearGradient {\r\n\r\n    constructor(\r\n        ...colorStops: ColorStop[]\r\n    ) {\r\n        this.colorStops = colorStops;\r\n    }\r\n\r\n    protected readonly colorStops: ColorStop[];\r\n\r\n    private toRgb(color: RgbColor, includeAlpha: boolean): string {\r\n        const [r, g, b, a] = color;\r\n        const rgb = [r, g, b].join(\" \");\r\n        const aTail = includeAlpha && a !== undefined ? ` / ${a}` : \"\";\r\n        return `rgb(${rgb}${aTail})`;\r\n    }\r\n\r\n    create(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): CanvasGradient {\r\n        const [x, y, , h] = rect;\r\n        const linGrad = ctx.createLinearGradient(x, y, 0, h);\r\n        for (const [offset, color] of this.colorStops) {\r\n            linGrad.addColorStop(offset, this.toRgb(color, includeAlpha));\r\n        }\r\n        return linGrad;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): void {\r\n        const linGrad = this.create(ctx, includeAlpha, ...rect);\r\n        ctx.save();\r\n        ctx.fillStyle = linGrad;\r\n        ctx.fillRect(...rect);\r\n        ctx.restore();\r\n    }\r\n\r\n}\r\n", "import { LinearGradient } from \"../lib/linear-gradient.js\";\r\n\r\nexport class BgGradient extends LinearGradient {\r\n    constructor() {\r\n        super(\r\n            [0.00, [15, 3, 40, 1]],\r\n            //[0.65, [26, 4, 48, 1]],\r\n            [1.00, [31, 29, 52, 1]]\r\n        );\r\n    }\r\n}\r\n", "export namespace Easing {\r\n    export const easeIn = (k: number, exp: number = 1.67): number => k ** exp;\r\n\r\n    export const easeOut = (k: number, exp: number = 1.67): number => 1 - (Math.max(1 - k, 0) ** exp);\r\n\r\n    export const easeInOut = (k: number): number => .5*(Math.sin((k - .5)*Math.PI) + 1);\r\n}\r\n", "type LogFn = (message: string, ...args: any[]) => void;\r\n\r\nexport interface ILogger {\r\n    debug: LogFn;\r\n    info: LogFn;\r\n    warn: LogFn;\r\n    error: LogFn;\r\n}\r\n\r\nexport class Logger implements ILogger {\r\n    constructor(\r\n        c?: Console\r\n    ) {\r\n        this.console = c ?? console;\r\n    }\r\n    private readonly console: Console;\r\n    debug: LogFn = (...args) => this.console.debug(...args);\r\n    info: LogFn = (...args) => this.console.info(...args);\r\n    warn: LogFn = (...args) => this.console.warn(...args);\r\n    error: LogFn = (...args) => this.console.error(...args);\r\n}\r\n", "import type { IAsyncAnimationFrameRenderer, Rect, Size } from \"../lib/abstractions.js\";\r\nimport { Easing } from \"../lib/easing.js\";\r\nimport { Logger, type ILogger } from \"../lib/logger.js\";\r\n\r\nexport interface LogoConfiguration {\r\n    url: string;\r\n    size: Size;\r\n}\r\n\r\nexport type LogoOptions = Readonly<LogoConfiguration>;\r\n\r\nexport class Logo implements IAsyncAnimationFrameRenderer {\r\n\r\n    constructor(\r\n        options: LogoOptions,\r\n        private readonly logger: ILogger = new Logger(),\r\n    ) {\r\n        this.config = { ...options };\r\n    }\r\n\r\n    private readonly config: LogoConfiguration;\r\n\r\n    // private static logoUrl: string = \"bare_s\u00E5_80_logo_nobg.svg\";\r\n    private image: HTMLImageElement | null = null;\r\n\r\n    private static loadImageAsync(url: string): Promise<HTMLImageElement> {\r\n        return new Promise<HTMLImageElement>((res, rej) => {\r\n            const image = new Image();\r\n            image.onload = () => res(image);\r\n            image.onerror = (e, src, lineno, colno, error) => rej(error ?? new Error(`Image failed to load: ${url}`));\r\n            image.src = url;\r\n        });\r\n    }\r\n\r\n    get size(): Size {\r\n        return [...this.config.size];\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = [...value];\r\n    }\r\n\r\n    async initAsync(): Promise<this> {\r\n        this.image = await Logo.loadImageAsync(this.config.url);\r\n        return this;\r\n    }\r\n\r\n    createFrameRenderer(\r\n        ctx: CanvasRenderingContext2D\r\n    ): (time: DOMHighResTimeStamp) => boolean {\r\n\r\n\r\n        let scaleFactor = 0;\r\n        let hasLogged = false;\r\n        const imageScale = 0.8;\r\n\r\n        return (time: DOMHighResTimeStamp): boolean => {\r\n\r\n            if (scaleFactor < 1) {\r\n                const newScaleFactor = Math.min(Easing.easeInOut(time * 0.00006), 1);\r\n                scaleFactor = newScaleFactor > scaleFactor ? newScaleFactor : 1;\r\n            } else if (!hasLogged) {\r\n                this.logger.debug(\"Logo animation done\", time, scaleFactor);\r\n                hasLogged = true;\r\n            }\r\n\r\n            const [w, h] = this.size;\r\n            const currWH = (Math.min(w, h) * scaleFactor) * imageScale;\r\n            const size = [currWH, currWH];\r\n            const offset = [(w - currWH) / 2, (h - currWH) / (1.52 + ((0.68 * scaleFactor)))];\r\n            const dimensions: Rect = [...offset, ...size] as Rect;\r\n\r\n            ctx.drawImage(this.image!, ...dimensions);\r\n\r\n            return true;\r\n        };\r\n\r\n    }\r\n}\r\n", "\r\nexport namespace Calc {\r\n\r\n    export function avg(...numbers: number[]): number {\r\n        return numbers.reduce((aggr, curr) => aggr + (curr / numbers.length), 0);\r\n    }\r\n\r\n}\r\n", "export interface IFrameAnimation {\r\n    start(): boolean;\r\n    stop(): boolean;\r\n}\r\n\r\nexport class FrameAnimation implements IFrameAnimation {\r\n\r\n    constructor(\r\n        private readonly cbRenderFrame: (time: DOMHighResTimeStamp) => boolean,\r\n        private readonly cbStopped?: () => void\r\n    ) {}\r\n\r\n    private started: boolean = false;\r\n    private currAnimationFrame: number | null = null;\r\n\r\n    start(): boolean {\r\n        const result = !this.started;\r\n        const render = (time: DOMHighResTimeStamp): void => {\r\n            if (this.started) {\r\n                this.started = this.cbRenderFrame(time);\r\n            }\r\n            if (!this.started) {\r\n                this.cbStopped?.();\r\n            } else {\r\n                this.currAnimationFrame = requestAnimationFrame(render);\r\n            }\r\n        };\r\n        this.started = true;\r\n        this.currAnimationFrame = requestAnimationFrame(render);\r\n        return result;\r\n    }\r\n\r\n    stop(): boolean {\r\n        const result = this.started;\r\n        this.started = false;\r\n        if (this.currAnimationFrame) {\r\n            cancelAnimationFrame(this.currAnimationFrame);\r\n        }\r\n        if (result) {\r\n            this.cbStopped?.();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n", "import type { CanvasStrokeOrFillStyle, IAnimationFrameRenderer, Line, Point, Size } from \"../lib/abstractions.js\";\r\nimport { Calc } from \"../lib/calc.js\";\r\nimport { FrameAnimation, type IFrameAnimation } from \"../lib/frame-animation.js\";\r\n\r\nexport interface PerspectiveGridConfiguration {\r\n    size: Size;\r\n    /** Field of view kind of the lense, smaller values = spheric */\r\n    fieldOfView: number;\r\n    /** view distance, higher values = further away */\r\n    viewDistance: number;\r\n    /** grid angle */\r\n    angle: number;\r\n    /** grid size in Cartesian */\r\n    gridSize: number;\r\n\r\n    lineScaling?: number;\r\n}\r\n\r\nexport type PerspectiveGridOptions = Partial<Readonly<PerspectiveGridConfiguration>>;\r\n\r\nexport interface PerspectiveGridRenderOptions {\r\n    horStrokeStyle: CanvasStrokeOrFillStyle;\r\n    verStrokeStyle: CanvasStrokeOrFillStyle;\r\n}\r\n\r\nexport interface PerspectiveGridAnimationOptions extends PerspectiveGridRenderOptions {\r\n    gridRowsPerSecond?: number;\r\n    rotateDegPerSecond?: number;\r\n    skipClear?: boolean;\r\n}\r\n\r\nexport class PerspectiveGrid implements IAnimationFrameRenderer<[options: PerspectiveGridAnimationOptions]> {\r\n\r\n    constructor(options?: PerspectiveGridOptions) {\r\n        this.config = {\r\n            ...this.getDefaultOptions(),\r\n            ...(options ?? {})\r\n        };\r\n        this.createVerticalLines();\r\n        this.createHorizontalLines();\r\n    }\r\n\r\n    private readonly config: Required<PerspectiveGridConfiguration>;\r\n    private readonly horizontalLines: Line[] = [];\r\n    private readonly verticalLines: Line[] = [];\r\n\r\n    private get center(): Point {\r\n        const [w, h] = this.size;\r\n        return [w / 2, h / 2];\r\n    }\r\n\r\n    private get lineWidth(): number {\r\n        return Calc.avg(...this.config.size) * 0.001 * this.config.lineScaling;\r\n    }\r\n\r\n    private getDefaultOptions(): Readonly<Required<PerspectiveGridConfiguration>> {\r\n        return {\r\n            size: [960, 540],\r\n            fieldOfView: 512,\r\n            viewDistance: 12,\r\n            angle: -75,\r\n            gridSize: 12,\r\n            lineScaling: 1\r\n        };\r\n    }\r\n\r\n    private rotateX(...point: Point): Point {\r\n        let [x, y] = point;\r\n        const { angle, fieldOfView, viewDistance } = this.config;\r\n        const rd = angle * Math.PI / 180; /// convert angle into radians\r\n        const ca = Math.cos(rd);\r\n        const sa = Math.sin(rd);\r\n\r\n        const ry = y * ca; /// convert y value as we are rotating\r\n        const rz = y * sa; /// only around x. Z will also change\r\n\r\n        /// Project the new coords into screen coords\r\n        const f = fieldOfView / (viewDistance + rz);\r\n        x = x * f + this.center[0];\r\n        y = ry * f + this.center[1];\r\n\r\n        return [x, y];\r\n    }\r\n\r\n    private createVerticalLines(): void {\r\n        const { gridSize } = this.config;\r\n\r\n        let p1: Point;\r\n        let p2: Point;\r\n\r\n        this.verticalLines.splice(0);\r\n\r\n        for (let i = -gridSize; i <= gridSize; i++) {\r\n            p1 = this.rotateX(i, -gridSize);\r\n            p2 = this.rotateX(i, gridSize);\r\n            this.verticalLines.push([p1, p2]);\r\n        }\r\n    }\r\n\r\n    private createHorizontalLines(movePercent: number = 0): void {\r\n        const { gridSize } = this.config;\r\n\r\n        let p1: Point;\r\n        let p2: Point;\r\n\r\n        this.horizontalLines.splice(0);\r\n\r\n        for (let i = -gridSize; i <= gridSize; i++) {\r\n            p1 = this.rotateX(-gridSize, i + (movePercent / 100));\r\n            p2 = this.rotateX(gridSize, i + (movePercent / 100));\r\n\r\n            // if (movePercent) {\r\n            //     const nextP1 = this.rotateX(-gridSize, i + 1);\r\n            //     const [,nextY1] = nextP1;\r\n            //     const [,y1] = p1;\r\n            //     const diff = nextY1 - y1;\r\n            //     const newY1 = y1 + (diff * (movePercent / 100));\r\n            //     p1 = [p1[0], newY1];\r\n            //     p2 = [p2[0], newY1];\r\n            // }\r\n\r\n            this.horizontalLines.push([p1, p2]);\r\n        }\r\n    }\r\n\r\n    private drawCanvasLine(ctx: CanvasRenderingContext2D, line: Line, strokeStyle: string | CanvasGradient | CanvasPattern): void {\r\n        const [p1, p2] = line;\r\n        ctx.save();\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.beginPath();\r\n        ctx.moveTo(...p1);\r\n        ctx.lineTo(...p2);\r\n        ctx.strokeStyle = strokeStyle;\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    private toSvgLine(l: Line, strokeStyle: string, indent: string = \"  \"): string {\r\n        const [[x1, y1], [x2, y2]] = l;\r\n        return `${indent}<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"${strokeStyle}\"/>`;\r\n    }\r\n\r\n    get size(): Size {\r\n        return [...this.config.size];\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = value;\r\n    }\r\n\r\n    get angle(): number {\r\n        return this.config.angle;\r\n    }\r\n    set angle(value: number) {\r\n        this.config.angle = value;\r\n    }\r\n\r\n    get fieldOfView(): number {\r\n        return this.config.fieldOfView;\r\n    }\r\n    set fieldOfView(value: number) {\r\n        this.config.fieldOfView = value;\r\n    }\r\n\r\n    renderToCanvas(ctx: CanvasRenderingContext2D, options: PerspectiveGridRenderOptions, clear?: boolean): void {\r\n        if (clear) {\r\n            ctx.clearRect(0, 0, ...this.size);\r\n        }\r\n        for (const l of this.verticalLines) {\r\n            this.drawCanvasLine(ctx, l, options.verStrokeStyle);\r\n        }\r\n        for (const l of this.horizontalLines) {\r\n            this.drawCanvasLine(ctx, l, options.horStrokeStyle);\r\n        }\r\n    }\r\n\r\n    toSvg(options: PerspectiveGridRenderOptions): string {\r\n        const [w, h] = this.size;\r\n        return [\r\n            `<svg width=\"${w}\" height=\"${h}\" xmlns=\"http://www.w3.org/2000/svg\">`,\r\n            ...this.verticalLines.map(l => this.toSvgLine(l, options.verStrokeStyle as string)),\r\n            ...this.horizontalLines.map(l => this.toSvgLine(l, options.horStrokeStyle as string)),\r\n            \"</svg>\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    createFrameRenderer(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: PerspectiveGridAnimationOptions\r\n    ): (time: DOMHighResTimeStamp) => boolean {\r\n        let rowMovePercent = 0;\r\n        let lastTime = 0;\r\n        let rowCounter = 0;\r\n        return (time: DOMHighResTimeStamp) => {\r\n\r\n            const timeDelta = time - lastTime;\r\n            const rotateDegDelta = (timeDelta / 1000) * (options.rotateDegPerSecond ?? 0);\r\n            this.angle += rotateDegDelta % 360;\r\n            let hasMoreFrames = true;\r\n            lastTime = time;\r\n            // const timeDeltaSeconds = timeDelta / 1_000;\r\n\r\n            const movePercentDelta = timeDelta * (options.gridRowsPerSecond ?? 3) / 10;\r\n            this.createVerticalLines();\r\n            this.createHorizontalLines(rowMovePercent);\r\n            this.renderToCanvas(ctx, options, !options.skipClear);\r\n            if (rowMovePercent + movePercentDelta >= 100) {\r\n                rowCounter++;\r\n            }\r\n            if (rowCounter /*> 3*/ < 0) {\r\n                hasMoreFrames = false;\r\n            }\r\n            rowMovePercent = (rowMovePercent + movePercentDelta) % 100;\r\n            return hasMoreFrames;\r\n        };\r\n\r\n    }\r\n\r\n    private canvasAnimation: IFrameAnimation | null = null;\r\n\r\n    startCanvasAnimation(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: PerspectiveGridAnimationOptions,\r\n        onStopped?: () => void\r\n    ): boolean {\r\n        this.canvasAnimation = new FrameAnimation(this.createFrameRenderer(\r\n            ctx,\r\n            options\r\n        ), onStopped);\r\n        return this.canvasAnimation.start();\r\n    }\r\n\r\n    stopCanvasAnimation(): boolean {\r\n        return this.canvasAnimation?.stop() ?? false;\r\n    }\r\n\r\n}\r\n\r\n", "import { LinearGradient } from \"../lib/linear-gradient.js\";\r\n\r\nexport class ShadowGradient extends LinearGradient {\r\n    constructor() {\r\n        super(\r\n            [0.00, [26, 4, 48, 0.00]],\r\n            [0.30, [26, 4, 48, 0.00]],\r\n            [0.50, [7, 1, 10, 0.7]],\r\n            [0.60, [4, 1, 5, 0.99]],\r\n            [0.65, [1, 1, 1, 1.00]],\r\n            [0.68, [4, 1, 7, 0.99]],\r\n            [0.78, [11, 10, 17, 0.7]],\r\n            [1.00, [41, 39, 62, 0.00]]\r\n        );\r\n    }\r\n}\r\n", "import type { CanvasStrokeOrFillStyle, IAnimationFrameRenderer, Size } from \"../lib/abstractions.js\";\r\nimport { Calc } from \"../lib/calc.js\";\r\n\r\ntype Star = [x: number, y: number, radius: number];\r\n\r\nexport interface StarfieldConfiguration {\r\n    starCount: number;\r\n    size: Size;\r\n    color: CanvasStrokeOrFillStyle;\r\n    patternSizeFactor?: number;\r\n    starScaling?: number;\r\n}\r\n\r\nexport type StarfieldOptions = Readonly<StarfieldConfiguration>;\r\n\r\nexport interface StarfieldAnimationOptions {\r\n    rotateDegPerSecond: number;\r\n    rotateCenterFactors?: [horCenterFactor: number, verCenterFactor: number];\r\n}\r\n\r\ninterface AnimationState {\r\n    ctx: CanvasRenderingContext2D;\r\n    pattern: CanvasPattern;\r\n}\r\n\r\n\r\nexport class Starfield implements IAnimationFrameRenderer<[StarfieldAnimationOptions]> {\r\n\r\n    constructor(\r\n        options: StarfieldOptions\r\n    ) {\r\n        this.config = {\r\n            patternSizeFactor: 0.5,\r\n            starScaling: 1,\r\n            ...options\r\n        };\r\n        this.origSize = [...options.size];\r\n        this.stars = Starfield.createStars(this.config, this.patternSize);\r\n    }\r\n\r\n    private readonly config: Required<StarfieldConfiguration>;\r\n    private readonly stars: Star[];\r\n    private readonly origSize: Size;\r\n    private animationState?: AnimationState;\r\n\r\n    private get patternSize(): Size {\r\n        const [w, h] = this.size;\r\n        return [w * this.config.patternSizeFactor, h * this.config.patternSizeFactor];\r\n    }\r\n\r\n    get scaling(): [horScaleFactor: number, verScaleFactor: number] {\r\n        return [this.size[0] / this.origSize[0], this.size[1] / this.origSize[1]];\r\n    }\r\n\r\n    get size(): Size {\r\n        return this.config.size;\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = [...value];\r\n        if (this.animationState) {\r\n            this.animationState.pattern = this.createPattern(this.animationState.ctx);\r\n        }\r\n    }\r\n\r\n    private static createStars(config: Required<StarfieldConfiguration>, size: Size): Star[] {\r\n        const result: Star[] = [];\r\n        const [pW, pH] = size;\r\n        for (let i = 0; i < config.starCount; ++i) {\r\n            const x = Math.random() * pW;\r\n            const y = Math.random() * pH;\r\n            const radius = Math.random() * (Calc.avg(...config.size) * 0.001 * config.starScaling);\r\n            result.push([x, y, radius]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static renderStars(stars: Star[], ctx: CanvasRenderingContext2D, color: CanvasStrokeOrFillStyle): void {\r\n        for (const s of stars) {\r\n            ctx.beginPath();\r\n            ctx.arc(...s, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = color;\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    createPattern(ctx: CanvasRenderingContext2D): CanvasPattern {\r\n        const canvas = document.createElement(\"canvas\");\r\n        [canvas.width, canvas.height] = this.patternSize;\r\n        const patternCtx = canvas.getContext(\"2d\")!;\r\n        patternCtx.scale(...this.scaling);\r\n        Starfield.renderStars(this.stars, patternCtx, this.config.color);\r\n        // patternCtx.canvas.toBlob(b => {\r\n        //     const oUrl = URL.createObjectURL(b!);\r\n        //     const a = document.createElement(\"a\");\r\n        //     a.setAttribute(\"download\", \"image.png\");\r\n        //     a.setAttribute(\"href\", oUrl);\r\n        //     a.click();\r\n        //     URL.revokeObjectURL(oUrl);\r\n        // }, \"image/png\");\r\n        return ctx.createPattern(canvas, \"repeat\")!;\r\n    }\r\n\r\n    createFrameRenderer(ctx: CanvasRenderingContext2D, options: StarfieldAnimationOptions): (time: number) => boolean {\r\n        const radPerSecond = options.rotateDegPerSecond * (Math.PI / 180);\r\n        this.animationState = {\r\n            ctx: ctx,\r\n            pattern: this.createPattern(ctx)\r\n        };\r\n        const [horCenterFactor, verCenterFactor] = options.rotateCenterFactors ?? [0.5, 0.65];\r\n        return time => {\r\n            const rotatation = ((time / 1000) * radPerSecond) % (Math.PI * 2);\r\n            const [w, h] = this.size;\r\n            ctx.save();\r\n            ctx.translate(w * horCenterFactor, h * verCenterFactor);\r\n            ctx.rotate(rotatation);\r\n\r\n            ctx.beginPath();\r\n\r\n            const hemisphereRadius = Math.sqrt(\r\n                ((w * Math.max(horCenterFactor, 1 - horCenterFactor)) ** 2) +\r\n                ((h * Math.max(verCenterFactor, 1 - verCenterFactor)) ** 2)\r\n            );\r\n\r\n            ctx.arc(0, 0, hemisphereRadius, 0, 2 * Math.PI);\r\n\r\n            // ctx.scale(...this.scaling);\r\n            ctx.fillStyle = this.animationState!.pattern;\r\n            ctx.fill();\r\n\r\n            ctx.strokeStyle = \"#FFF\";\r\n            ctx.stroke();\r\n\r\n            ctx.restore();\r\n            return true;\r\n        };\r\n    }\r\n\r\n}\r\n", "import { Logger } from \"./logger.js\";\r\n\r\nexport namespace Timing {\r\n\r\n    const logger = new Logger();\r\n\r\n    export function delayAsync(ms: number, abortSignal?: AbortSignal): Promise<void> {\r\n        let timer: number | null = null;\r\n        const onAbort = (): void => {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n                timer = null;\r\n            }\r\n            abortSignal?.removeEventListener(\"abort\", onAbort);\r\n            logger.debug(\"Delay aborted\");\r\n        };\r\n        return new Promise(r => {\r\n            timer = setTimeout(r, ms);\r\n            abortSignal?.addEventListener(\"abort\", onAbort);\r\n        });\r\n    }\r\n\r\n    let debounceCallback: (() => any) | undefined;\r\n    let lastAbortController: AbortController | null;\r\n\r\n    export function debounce(fn: () => any, ms: number): void {\r\n\r\n        debounceCallback = fn;\r\n        if (lastAbortController) {\r\n            lastAbortController.abort(\"debounced\");\r\n        }\r\n        lastAbortController = new AbortController();\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        delayAsync(ms, lastAbortController.signal).then(debounceCallback);\r\n\r\n    }\r\n}\r\n", "import { BgGradient } from \"./assets/bg-gradient.js\";\r\nimport { Logo } from \"./assets/logo.js\";\r\nimport { PerspectiveGrid } from \"./assets/perspective-grid.js\";\r\nimport { ShadowGradient } from \"./assets/shadow-gradient.js\";\r\nimport { Starfield } from \"./assets/starfield.js\";\r\nimport type { Size } from \"./lib/abstractions.js\";\r\nimport { FrameAnimation } from \"./lib/frame-animation.js\";\r\nimport type { ILinearGradient } from \"./lib/linear-gradient.js\";\r\nimport { Timing } from \"./lib/timing.js\";\r\n\r\ninterface Bs80Assets {\r\n    bg: ILinearGradient;\r\n    starField: Starfield //IAnimationFrameRenderer<[StarFieldAnimationOptions]>;\r\n    grid: PerspectiveGrid //IAnimationFrameRenderer<[PerspectiveGridAnimationOptions]>;\r\n    shadow: ILinearGradient;\r\n    logo: Logo //IAsyncAnimationFrameRenderer;\r\n}\r\n\r\nexport class Bs80Animation {\r\n\r\n    constructor(containerOrSelector: HTMLElement | string, private readonly getSize: () => Size) {\r\n\r\n        const container = typeof containerOrSelector === \"string\" ? document.querySelector<HTMLElement>(containerOrSelector) : containerOrSelector;\r\n        if (!container) {\r\n            throw new Error(\"Invali container argument\");\r\n        }\r\n        this.container = container;\r\n\r\n        const [w, h] = this.size = getSize();\r\n\r\n        this.ctx = this.appendCanvas(...this.size);\r\n\r\n        this.assets = {\r\n            bg: new BgGradient(),\r\n            shadow: new ShadowGradient(),\r\n            starField: new Starfield({\r\n                size: this.size,\r\n                patternSizeFactor: 0.5,\r\n                starCount: 360,\r\n                starScaling: 1,\r\n                color: \"rgb(255 255 255 / .6)\"\r\n            }),\r\n            grid: new PerspectiveGrid({\r\n                // size: [960, 540]\r\n                size: this.size,\r\n                viewDistance: 26,\r\n                gridSize: 23,\r\n                angle: 285,\r\n                fieldOfView: h / 2,\r\n                lineScaling: 1\r\n            }),\r\n            logo: new Logo({\r\n                url: \"./images/bare_saa_80_logo_nobg.svg\",\r\n                size: [w, h]\r\n            })\r\n        };\r\n\r\n        this.ctorPromise = this.assets.logo.initAsync();\r\n\r\n    }\r\n\r\n    private readonly ctorPromise: Promise<any>;\r\n    private readonly container: HTMLElement;\r\n\r\n    private readonly assets: Bs80Assets;\r\n    ctx: CanvasRenderingContext2D;\r\n    size: Size;\r\n\r\n    private appendCanvas(width: number, height: number): CanvasRenderingContext2D {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        this.container.appendChild(canvas);\r\n        const ctx = canvas.getContext(\"2d\")!;\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = \"high\";\r\n\r\n        return ctx;\r\n    }\r\n\r\n    private readonly onWindowResize: (e: Event) => void = e => {\r\n        Timing.debounce(async () => {\r\n            const a = this.assets;\r\n            if (a) {\r\n                await Timing.delayAsync(200);\r\n                const size = this.getSize();\r\n                const [, h] = this.size = a.grid.size = a.logo.size = a.starField.size = [this.ctx.canvas.width, this.ctx.canvas.height] = size;\r\n                a.grid.fieldOfView = h / 2;\r\n            }\r\n        }, 250);\r\n    };\r\n\r\n    async start(): Promise<void> {\r\n\r\n        await this.ctorPromise;\r\n\r\n        window.addEventListener(\"resize\", this.onWindowResize);\r\n\r\n        const { bg, shadow, starField, grid, logo } = this.assets;\r\n\r\n        const renderStarFieldFrame = starField.createFrameRenderer(this.ctx, {\r\n            rotateDegPerSecond: -3,\r\n            rotateCenterFactors: [0.5, 0.65]\r\n        });\r\n\r\n        const renderGridFrame = grid.createFrameRenderer(this.ctx, {\r\n            horStrokeStyle: \"rgb(97 161 172 / .42)\",\r\n            verStrokeStyle: \"rgb(255 255 255 / .15)\",\r\n            gridRowsPerSecond: 2,\r\n            rotateDegPerSecond: 0,\r\n            skipClear: true\r\n        });\r\n\r\n        const renderLogoFrame = logo.createFrameRenderer(this.ctx);\r\n\r\n        const logoAnimationStartTime = 3_000;\r\n\r\n        const animation = new FrameAnimation(time => {\r\n\r\n            const ctx = this.ctx;\r\n            const [w, h] = this.size;\r\n\r\n            let hasMoreFrames = true;\r\n\r\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n            // Render opaque background gradient\r\n            bg.render(ctx, false, 0, 0, w, h);\r\n\r\n            hasMoreFrames = renderStarFieldFrame(time);\r\n\r\n            // Position and render bottom grid\r\n            ctx.save();\r\n            ctx.translate(0, h / 4.25);\r\n            hasMoreFrames = renderGridFrame(time);\r\n            ctx.restore();\r\n\r\n            // Rotate, position and render top grid\r\n            ctx.save();\r\n            ctx.rotate(Math.PI);\r\n            ctx.translate(-w, h * -1.06);\r\n            hasMoreFrames = renderGridFrame(time);\r\n            ctx.restore();\r\n\r\n            // Render partly transparent overlay gradient\r\n            //bgGradient.render(ctx, true, 0, 0, w, h);\r\n            shadow.render(ctx, true, 0, 0, w, h);\r\n\r\n            if (time > logoAnimationStartTime) {\r\n                renderLogoFrame(time - logoAnimationStartTime);\r\n            }\r\n\r\n            return hasMoreFrames;\r\n\r\n        });\r\n\r\n        animation.start();\r\n    }\r\n}\r\n", "import { Bs80Animation } from \"./bs80-animation.js\";\r\n\r\n\r\n// Ensure live reload for TS/JS and hot reload for CSS works when debugging\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare const IS_DEVELOPMENT: boolean | undefined;\r\nif (IS_DEVELOPMENT) {\r\n    import(\"./live-reload.js\");\r\n}\r\n\r\n\r\n// Start animation\r\nconst bs80Animation = new Bs80Animation(\r\n    document.body,\r\n    () => [window.innerWidth, window.innerHeight]\r\n);\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\r\nbs80Animation.start();\r\n\r\n"],
  "mappings": "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",
  "names": ["LinearGradient", "colorStops", "color", "includeAlpha", "g", "b", "rgb", "aTail", "ctx", "rect", "x", "y", "h", "linGrad", "offset", "BgGradient", "LinearGradient", "Easing", "k", "exp", "Logger", "c", "args", "Logo", "options", "logger", "Logger", "url", "res", "rej", "image", "e", "src", "lineno", "colno", "error", "value", "ctx", "scaleFactor", "hasLogged", "imageScale", "time", "newScaleFactor", "Easing", "w", "h", "currWH", "size", "dimensions", "Calc", "avg", "numbers", "aggr", "curr", "FrameAnimation", "cbRenderFrame", "cbStopped", "result", "render", "time", "_a", "PerspectiveGrid", "options", "w", "h", "Calc", "point", "x", "y", "angle", "fieldOfView", "viewDistance", "rd", "ca", "sa", "ry", "rz", "f", "gridSize", "p1", "p2", "i", "movePercent", "ctx", "line", "strokeStyle", "l", "indent", "x1", "y1", "x2", "y2", "value", "clear", "rowMovePercent", "lastTime", "rowCounter", "time", "_a", "_b", "timeDelta", "rotateDegDelta", "hasMoreFrames", "movePercentDelta", "onStopped", "FrameAnimation", "ShadowGradient", "LinearGradient", "Starfield", "options", "w", "h", "value", "config", "size", "result", "pW", "pH", "i", "x", "y", "radius", "Calc", "stars", "ctx", "color", "s", "canvas", "patternCtx", "_a", "radPerSecond", "horCenterFactor", "verCenterFactor", "time", "rotatation", "hemisphereRadius", "Timing", "logger", "Logger", "delayAsync", "ms", "abortSignal", "timer", "onAbort", "r", "debounceCallback", "lastAbortController", "debounce", "fn", "Bs80Animation", "containerOrSelector", "getSize", "Timing", "a", "size", "h", "container", "w", "BgGradient", "ShadowGradient", "Starfield", "PerspectiveGrid", "Logo", "width", "height", "canvas", "ctx", "bg", "shadow", "starField", "grid", "logo", "renderStarFieldFrame", "renderGridFrame", "renderLogoFrame", "logoAnimationStartTime", "FrameAnimation", "time", "hasMoreFrames", "bs80Animation", "Bs80Animation"]
}
