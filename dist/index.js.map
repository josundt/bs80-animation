{
  "version": 3,
  "sources": ["../src/lib/linear-gradient.ts", "../src/assets/bg-gradient.ts", "../src/lib/easing.ts", "../src/lib/logger.ts", "../src/assets/logo.ts", "../src/lib/calc.ts", "../src/lib/frame-animation.ts", "../src/assets/perspective-grid.ts", "../src/assets/shadow-gradient.ts", "../src/assets/star-field.ts", "../src/lib/timing.ts", "../src/index.ts"],
  "sourcesContent": ["import type { Rect, RgbColor } from \"./abstractions.js\";\r\n\r\ntype ColorStop = [offset: number, color: RgbColor];\r\n\r\nexport interface ILinearGradient {\r\n    create(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): CanvasGradient;\r\n    render(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): void;\r\n}\r\n\r\nexport class LinearGradient implements ILinearGradient {\r\n\r\n    constructor(\r\n        ...colorStops: ColorStop[]\r\n    ) {\r\n        this.colorStops = colorStops;\r\n    }\r\n\r\n    protected readonly colorStops: ColorStop[];\r\n\r\n    private toRgb(color: RgbColor, includeAlpha: boolean): string {\r\n        const [r, g, b, a] = color;\r\n        const rgb = [r, g, b].join(\" \");\r\n        const aTail = includeAlpha && a !== undefined ? ` / ${a}` : \"\";\r\n        return `rgb(${rgb}${aTail})`;\r\n    }\r\n\r\n    create(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): CanvasGradient {\r\n        const [x, y, , h] = rect;\r\n        const linGrad = ctx.createLinearGradient(x, y, 0, h);\r\n        for (const [offset, color] of this.colorStops) {\r\n            linGrad.addColorStop(offset, this.toRgb(color, includeAlpha));\r\n        }\r\n        return linGrad;\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D, includeAlpha: boolean, ...rect: Rect): void {\r\n        const linGrad = this.create(ctx, includeAlpha, ...rect);\r\n        ctx.save();\r\n        ctx.fillStyle = linGrad;\r\n        ctx.fillRect(...rect);\r\n        ctx.restore();\r\n    }\r\n\r\n}\r\n", "import { LinearGradient } from \"../lib/linear-gradient.js\";\r\n\r\nexport class BgGradient extends LinearGradient {\r\n    constructor() {\r\n        super(\r\n            [0.00, [15, 3, 40, 1]],\r\n            //[0.65, [26, 4, 48, 1]],\r\n            [1.00, [31, 29, 52, 1]]\r\n        );\r\n    }\r\n}\r\n", "export namespace Easing {\r\n    export const easeIn = (k: number, exp: number = 1.67): number => k ** exp;\r\n\r\n    export const easeOut = (k: number, exp: number = 1.67): number => 1 - (Math.max(1 - k, 0) ** exp);\r\n\r\n    export const easeInOut = (k: number): number => .5*(Math.sin((k - .5)*Math.PI) + 1);\r\n}\r\n", "type LogFn = (message: string, ...args: any[]) => void;\r\n\r\nexport interface ILogger {\r\n    debug: LogFn;\r\n    info: LogFn;\r\n    warn: LogFn;\r\n    error: LogFn;\r\n}\r\n\r\nexport class Logger implements ILogger {\r\n    constructor(\r\n        c?: Console\r\n    ) {\r\n        this.console = c ?? console;\r\n    }\r\n    private readonly console: Console;\r\n    debug: LogFn = (...args) => this.console.debug(...args);\r\n    info: LogFn = (...args) => this.console.info(...args);\r\n    warn: LogFn = (...args) => this.console.warn(...args);\r\n    error: LogFn = (...args) => this.console.error(...args);\r\n}\r\n", "import type { IAsyncAnimationFrameRenderer, Rect, Size } from \"../lib/abstractions.js\";\r\nimport { Easing } from \"../lib/easing.js\";\r\nimport { Logger, type ILogger } from \"../lib/logger.js\";\r\n\r\nexport interface LogoConfiguration {\r\n    url: string;\r\n    size: Size;\r\n}\r\n\r\nexport type LogoOptions = Readonly<LogoConfiguration>;\r\n\r\nexport class Logo implements IAsyncAnimationFrameRenderer {\r\n\r\n    constructor(\r\n        options: LogoOptions,\r\n        private readonly logger: ILogger = new Logger(),\r\n    ) {\r\n        this.config = { ...options };\r\n    }\r\n\r\n    private readonly config: LogoConfiguration;\r\n\r\n    // private static logoUrl: string = \"bare_s\u00E5_80_logo_nobg.svg\";\r\n    private image: HTMLImageElement | null = null;\r\n\r\n    private static loadImageAsync(url: string): Promise<HTMLImageElement> {\r\n        return new Promise<HTMLImageElement>((res, rej) => {\r\n            const image = new Image();\r\n            image.onload = () => res(image);\r\n            image.onerror = (e, src, lineno, colno, error) => rej(error ?? new Error(`Image failed to load: ${url}`));\r\n            image.src = url;\r\n        });\r\n    }\r\n\r\n    get size(): Size {\r\n        return [...this.config.size];\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = [...value];\r\n    }\r\n\r\n    async initAsync(): Promise<this> {\r\n        this.image = await Logo.loadImageAsync(this.config.url);\r\n        return this;\r\n    }\r\n\r\n    createFrameRenderer(\r\n        ctx: CanvasRenderingContext2D\r\n    ): (time: DOMHighResTimeStamp) => boolean {\r\n\r\n\r\n        let scaleFactor = 0;\r\n        let hasLogged = false;\r\n        const imageScale = 0.8;\r\n\r\n        return (time: DOMHighResTimeStamp): boolean => {\r\n\r\n            if (scaleFactor < 1) {\r\n                const newScaleFactor = Math.min(Easing.easeInOut(time * 0.00006), 1);\r\n                scaleFactor = newScaleFactor > scaleFactor ? newScaleFactor : 1;\r\n            } else if (!hasLogged) {\r\n                this.logger.debug(\"Logo animation done\", time, scaleFactor);\r\n                hasLogged = true;\r\n            }\r\n\r\n            const [w, h] = this.size;\r\n            const currWH = (Math.min(w, h) * scaleFactor) * imageScale;\r\n            const size = [currWH, currWH];\r\n            const offset = [(w - currWH) / 2, (h - currWH) / (1.52 + ((0.68 * scaleFactor)))];\r\n            const dimensions: Rect = [...offset, ...size] as Rect;\r\n\r\n            ctx.drawImage(this.image!, ...dimensions);\r\n\r\n            return true;\r\n        };\r\n\r\n    }\r\n}\r\n", "\r\nexport namespace Calc {\r\n\r\n    export function avg(...numbers: number[]): number {\r\n        return numbers.reduce((aggr, curr) => aggr + (curr / numbers.length), 0);\r\n    }\r\n\r\n}\r\n", "export interface IFrameAnimation {\r\n    start(): boolean;\r\n    stop(): boolean;\r\n}\r\n\r\nexport class FrameAnimation implements IFrameAnimation {\r\n\r\n    constructor(\r\n        private readonly cbRenderFrame: (time: DOMHighResTimeStamp) => boolean,\r\n        private readonly cbStopped?: () => void\r\n    ) {}\r\n\r\n    private started: boolean = false;\r\n    private currAnimationFrame: number | null = null;\r\n\r\n    start(): boolean {\r\n        const result = !this.started;\r\n        const render = (time: DOMHighResTimeStamp): void => {\r\n            if (this.started) {\r\n                this.started = this.cbRenderFrame(time);\r\n            }\r\n            if (!this.started) {\r\n                this.cbStopped?.();\r\n            } else {\r\n                this.currAnimationFrame = requestAnimationFrame(render);\r\n            }\r\n        };\r\n        this.started = true;\r\n        this.currAnimationFrame = requestAnimationFrame(render);\r\n        return result;\r\n    }\r\n\r\n    stop(): boolean {\r\n        const result = this.started;\r\n        this.started = false;\r\n        if (this.currAnimationFrame) {\r\n            cancelAnimationFrame(this.currAnimationFrame);\r\n        }\r\n        if (result) {\r\n            this.cbStopped?.();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n", "import type { CanvasStrokeOrFillStyle, IAnimationFrameRenderer, Line, Point, Size } from \"../lib/abstractions.js\";\r\nimport { Calc } from \"../lib/calc.js\";\r\nimport { FrameAnimation, type IFrameAnimation } from \"../lib/frame-animation.js\";\r\n\r\nexport interface PerspectiveGridConfiguration {\r\n    size: Size;\r\n    /** Field of view kind of the lense, smaller values = spheric */\r\n    fieldOfView: number;\r\n    /** view distance, higher values = further away */\r\n    viewDistance: number;\r\n    /** grid angle */\r\n    angle: number;\r\n    /** grid size in Cartesian */\r\n    gridSize: number;\r\n\r\n    lineScaling?: number;\r\n}\r\n\r\nexport type PerspectiveGridOptions = Partial<Readonly<PerspectiveGridConfiguration>>;\r\n\r\nexport interface PerspectiveGridRenderOptions {\r\n    horStrokeStyle: CanvasStrokeOrFillStyle;\r\n    verStrokeStyle: CanvasStrokeOrFillStyle;\r\n}\r\n\r\nexport interface PerspectiveGridAnimationOptions extends PerspectiveGridRenderOptions {\r\n    gridRowsPerSecond?: number;\r\n    rotateDegPerSecond?: number;\r\n    skipClear?: boolean;\r\n}\r\n\r\nexport class PerspectiveGrid implements IAnimationFrameRenderer<[options: PerspectiveGridAnimationOptions]> {\r\n\r\n    constructor(options?: PerspectiveGridOptions) {\r\n        this.config = {\r\n            ...this.getDefaultOptions(),\r\n            ...(options ?? {})\r\n        };\r\n        this.createVerticalLines();\r\n        this.createHorizontalLines();\r\n    }\r\n\r\n    private readonly config: Required<PerspectiveGridConfiguration>;\r\n    private readonly horizontalLines: Line[] = [];\r\n    private readonly verticalLines: Line[] = [];\r\n\r\n    private get center(): Point {\r\n        const [w, h] = this.size;\r\n        return [w / 2, h / 2];\r\n    }\r\n\r\n    private get lineWidth(): number {\r\n        return Calc.avg(...this.config.size) * 0.001 * this.config.lineScaling;\r\n    }\r\n\r\n    private getDefaultOptions(): Readonly<Required<PerspectiveGridConfiguration>> {\r\n        return {\r\n            size: [960, 540],\r\n            fieldOfView: 512,\r\n            viewDistance: 12,\r\n            angle: -75,\r\n            gridSize: 12,\r\n            lineScaling: 1\r\n        };\r\n    }\r\n\r\n    private rotateX(...point: Point): Point {\r\n        let [x, y] = point;\r\n        const { angle, fieldOfView, viewDistance } = this.config;\r\n        const rd = angle * Math.PI / 180; /// convert angle into radians\r\n        const ca = Math.cos(rd);\r\n        const sa = Math.sin(rd);\r\n\r\n        const ry = y * ca; /// convert y value as we are rotating\r\n        const rz = y * sa; /// only around x. Z will also change\r\n\r\n        /// Project the new coords into screen coords\r\n        const f = fieldOfView / (viewDistance + rz);\r\n        x = x * f + this.center[0];\r\n        y = ry * f + this.center[1];\r\n\r\n        return [x, y];\r\n    }\r\n\r\n    private createVerticalLines(): void {\r\n        const { gridSize } = this.config;\r\n\r\n        let p1: Point;\r\n        let p2: Point;\r\n\r\n        this.verticalLines.splice(0);\r\n\r\n        for (let i = -gridSize; i <= gridSize; i++) {\r\n            p1 = this.rotateX(i, -gridSize);\r\n            p2 = this.rotateX(i, gridSize);\r\n            this.verticalLines.push([p1, p2]);\r\n        }\r\n    }\r\n\r\n    private createHorizontalLines(movePercent: number = 0): void {\r\n        const { gridSize } = this.config;\r\n\r\n        let p1: Point;\r\n        let p2: Point;\r\n\r\n        this.horizontalLines.splice(0);\r\n\r\n        for (let i = -gridSize; i <= gridSize; i++) {\r\n            p1 = this.rotateX(-gridSize, i + (movePercent / 100));\r\n            p2 = this.rotateX(gridSize, i + (movePercent / 100));\r\n\r\n            // if (movePercent) {\r\n            //     const nextP1 = this.rotateX(-gridSize, i + 1);\r\n            //     const [,nextY1] = nextP1;\r\n            //     const [,y1] = p1;\r\n            //     const diff = nextY1 - y1;\r\n            //     const newY1 = y1 + (diff * (movePercent / 100));\r\n            //     p1 = [p1[0], newY1];\r\n            //     p2 = [p2[0], newY1];\r\n            // }\r\n\r\n            this.horizontalLines.push([p1, p2]);\r\n        }\r\n    }\r\n\r\n    private drawCanvasLine(ctx: CanvasRenderingContext2D, line: Line, strokeStyle: string | CanvasGradient | CanvasPattern): void {\r\n        const [p1, p2] = line;\r\n        ctx.save();\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.beginPath();\r\n        ctx.moveTo(...p1);\r\n        ctx.lineTo(...p2);\r\n        ctx.strokeStyle = strokeStyle;\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    private toSvgLine(l: Line, strokeStyle: string, indent: string = \"  \"): string {\r\n        const [[x1, y1], [x2, y2]] = l;\r\n        return `${indent}<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"${strokeStyle}\"/>`;\r\n    }\r\n\r\n    get size(): Size {\r\n        return [...this.config.size];\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = value;\r\n    }\r\n\r\n    get angle(): number {\r\n        return this.config.angle;\r\n    }\r\n    set angle(value: number) {\r\n        this.config.angle = value;\r\n    }\r\n\r\n    get fieldOfView(): number {\r\n        return this.config.fieldOfView;\r\n    }\r\n    set fieldOfView(value: number) {\r\n        this.config.fieldOfView = value;\r\n    }\r\n\r\n    renderToCanvas(ctx: CanvasRenderingContext2D, options: PerspectiveGridRenderOptions, clear?: boolean): void {\r\n        if (clear) {\r\n            ctx.clearRect(0, 0, ...this.size);\r\n        }\r\n        for (const l of this.verticalLines) {\r\n            this.drawCanvasLine(ctx, l, options.verStrokeStyle);\r\n        }\r\n        for (const l of this.horizontalLines) {\r\n            this.drawCanvasLine(ctx, l, options.horStrokeStyle);\r\n        }\r\n    }\r\n\r\n    toSvg(options: PerspectiveGridRenderOptions): string {\r\n        const [w, h] = this.size;\r\n        return [\r\n            `<svg width=\"${w}\" height=\"${h}\" xmlns=\"http://www.w3.org/2000/svg\">`,\r\n            ...this.verticalLines.map(l => this.toSvgLine(l, options.verStrokeStyle as string)),\r\n            ...this.horizontalLines.map(l => this.toSvgLine(l, options.horStrokeStyle as string)),\r\n            \"</svg>\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    createFrameRenderer(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: PerspectiveGridAnimationOptions\r\n    ): (time: DOMHighResTimeStamp) => boolean {\r\n        let rowMovePercent = 0;\r\n        let lastTime = 0;\r\n        let rowCounter = 0;\r\n        return (time: DOMHighResTimeStamp) => {\r\n\r\n            const timeDelta = time - lastTime;\r\n            const rotateDegDelta = (timeDelta / 1000) * (options.rotateDegPerSecond ?? 0);\r\n            this.angle += rotateDegDelta % 360;\r\n            let hasMoreFrames = true;\r\n            lastTime = time;\r\n            // const timeDeltaSeconds = timeDelta / 1_000;\r\n\r\n            const movePercentDelta = timeDelta * (options.gridRowsPerSecond ?? 3) / 10;\r\n            this.createVerticalLines();\r\n            this.createHorizontalLines(rowMovePercent);\r\n            this.renderToCanvas(ctx, options, !options.skipClear);\r\n            if (rowMovePercent + movePercentDelta >= 100) {\r\n                rowCounter++;\r\n            }\r\n            if (rowCounter /*> 3*/ < 0) {\r\n                hasMoreFrames = false;\r\n            }\r\n            rowMovePercent = (rowMovePercent + movePercentDelta) % 100;\r\n            return hasMoreFrames;\r\n        };\r\n\r\n    }\r\n\r\n    private canvasAnimation: IFrameAnimation | null = null;\r\n\r\n    startCanvasAnimation(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: PerspectiveGridAnimationOptions,\r\n        onStopped?: () => void\r\n    ): boolean {\r\n        this.canvasAnimation = new FrameAnimation(this.createFrameRenderer(\r\n            ctx,\r\n            options\r\n        ), onStopped);\r\n        return this.canvasAnimation.start();\r\n    }\r\n\r\n    stopCanvasAnimation(): boolean {\r\n        return this.canvasAnimation?.stop() ?? false;\r\n    }\r\n\r\n}\r\n\r\n", "import { LinearGradient } from \"../lib/linear-gradient.js\";\r\n\r\nexport class ShadowGradient extends LinearGradient {\r\n    constructor() {\r\n        super(\r\n            [0.00, [26, 4, 48, 0.00]],\r\n            [0.30, [26, 4, 48, 0.00]],\r\n            [0.50, [7, 1, 10, 0.7]],\r\n            [0.60, [4, 1, 5, 0.99]],\r\n            [0.65, [1, 1, 1, 1.00]],\r\n            [0.68, [4, 1, 7, 0.99]],\r\n            [0.78, [11, 10, 17, 0.7]],\r\n            [1.00, [41, 39, 62, 0.00]]\r\n        );\r\n    }\r\n}\r\n", "import type { CanvasStrokeOrFillStyle, IAnimationFrameRenderer, Size } from \"../lib/abstractions.js\";\r\nimport { Calc } from \"../lib/calc.js\";\r\n\r\ntype Star = [x: number, y: number, radius: number];\r\n\r\nexport interface StarFieldConfiguration {\r\n    starCount: number;\r\n    size: Size;\r\n    color: CanvasStrokeOrFillStyle;\r\n    patternSizeFactor?: number;\r\n    starScaling?: number;\r\n}\r\n\r\nexport type StarFieldOptions = Readonly<StarFieldConfiguration>;\r\n\r\nexport interface StarFieldAnimationOptions {\r\n    rotateDegPerSecond: number;\r\n    rotateCenterFactors?: [horCenterFactor: number, verCenterFactor: number];\r\n}\r\n\r\ninterface AnimationState {\r\n    ctx: CanvasRenderingContext2D;\r\n    pattern: CanvasPattern;\r\n}\r\n\r\n\r\nexport class StarField implements IAnimationFrameRenderer<[StarFieldAnimationOptions]> {\r\n\r\n    constructor(\r\n        options: StarFieldOptions\r\n    ) {\r\n        this.config = {\r\n            patternSizeFactor: 0.5,\r\n            starScaling: 1,\r\n            ...options\r\n        };\r\n        this.origSize = [...options.size];\r\n        this.stars = StarField.createStars(this.config, this.patternSize);\r\n    }\r\n\r\n    private readonly config: Required<StarFieldConfiguration>;\r\n    private readonly stars: Star[];\r\n    private readonly origSize: Size;\r\n    private animationState?: AnimationState;\r\n\r\n    private get patternSize(): Size {\r\n        const [w, h] = this.size;\r\n        return [w * this.config.patternSizeFactor, h * this.config.patternSizeFactor];\r\n    }\r\n\r\n    get scaling(): [horScaleFactor: number, verScaleFactor: number] {\r\n        return [this.size[0] / this.origSize[0], this.size[1] / this.origSize[1]];\r\n    }\r\n\r\n    get size(): Size {\r\n        return this.config.size;\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = [...value];\r\n        if (this.animationState) {\r\n            this.animationState.pattern = this.createPattern(this.animationState.ctx);\r\n        }\r\n    }\r\n\r\n    private static createStars(config: Required<StarFieldConfiguration>, size: Size): Star[] {\r\n        const result: Star[] = [];\r\n        const [pW, pH] = size;\r\n        for (let i = 0; i < config.starCount; ++i) {\r\n            const x = Math.random() * pW;\r\n            const y = Math.random() * pH;\r\n            const radius = Math.random() * (Calc.avg(...config.size) * 0.001 * config.starScaling);\r\n            result.push([x, y, radius]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static renderStars(stars: Star[], ctx: CanvasRenderingContext2D, color: CanvasStrokeOrFillStyle): void {\r\n        for (const s of stars) {\r\n            ctx.beginPath();\r\n            ctx.arc(...s, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = color;\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    createPattern(ctx: CanvasRenderingContext2D): CanvasPattern {\r\n        const canvas = document.createElement(\"canvas\");\r\n        [canvas.width, canvas.height] = this.patternSize;\r\n        const patternCtx = canvas.getContext(\"2d\")!;\r\n        patternCtx.scale(...this.scaling);\r\n        StarField.renderStars(this.stars, patternCtx, this.config.color);\r\n        // patternCtx.canvas.toBlob(b => {\r\n        //     const oUrl = URL.createObjectURL(b!);\r\n        //     const a = document.createElement(\"a\");\r\n        //     a.setAttribute(\"download\", \"image.png\");\r\n        //     a.setAttribute(\"href\", oUrl);\r\n        //     a.click();\r\n        //     URL.revokeObjectURL(oUrl);\r\n        // }, \"image/png\");\r\n        return ctx.createPattern(canvas, \"repeat\")!;\r\n    }\r\n\r\n    createFrameRenderer(ctx: CanvasRenderingContext2D, options: StarFieldAnimationOptions): (time: number) => boolean {\r\n        const radPerSecond = options.rotateDegPerSecond * (Math.PI / 180);\r\n        this.animationState = {\r\n            ctx: ctx,\r\n            pattern: this.createPattern(ctx)\r\n        };\r\n        const [horCenterFactor, verCenterFactor] = options.rotateCenterFactors ?? [0.5, 0.65];\r\n        return time => {\r\n            const rotatation = ((time / 1000) * radPerSecond) % (Math.PI * 2);\r\n            const [w, h] = this.size;\r\n            ctx.save();\r\n            ctx.translate(w * horCenterFactor, h * verCenterFactor);\r\n            ctx.rotate(rotatation);\r\n\r\n            ctx.beginPath();\r\n\r\n            const hemisphereRadius = Math.sqrt(\r\n                ((w * Math.max(horCenterFactor, 1 - horCenterFactor)) ** 2) +\r\n                ((h * Math.max(verCenterFactor, 1 - verCenterFactor)) ** 2)\r\n            );\r\n\r\n            ctx.arc(0, 0, hemisphereRadius, 0, 2 * Math.PI);\r\n\r\n            // ctx.scale(...this.scaling);\r\n            ctx.fillStyle = this.animationState!.pattern;\r\n            ctx.fill();\r\n\r\n            ctx.strokeStyle = \"#FFF\";\r\n            ctx.stroke();\r\n\r\n            ctx.restore();\r\n            return true;\r\n        };\r\n    }\r\n\r\n}\r\n", "import { Logger } from \"./logger.js\";\r\n\r\nexport namespace Timing {\r\n\r\n    const logger = new Logger();\r\n\r\n    export function delayAsync(ms: number, abortSignal?: AbortSignal): Promise<void> {\r\n        let timer: number | null = null;\r\n        const onAbort = (): void => {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n                timer = null;\r\n            }\r\n            abortSignal?.removeEventListener(\"abort\", onAbort);\r\n            logger.debug(\"Delay aborted\");\r\n        };\r\n        return new Promise(r => {\r\n            timer = setTimeout(r, ms);\r\n            abortSignal?.addEventListener(\"abort\", onAbort);\r\n        });\r\n    }\r\n\r\n    let debounceCallback: (() => any) | undefined;\r\n    let lastAbortController: AbortController | null;\r\n\r\n    export function debounce(fn: () => any, ms: number): void {\r\n\r\n        debounceCallback = fn;\r\n        if (lastAbortController) {\r\n            lastAbortController.abort(\"debounced\");\r\n        }\r\n        lastAbortController = new AbortController();\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        delayAsync(ms, lastAbortController.signal).then(debounceCallback);\r\n\r\n    }\r\n}\r\n", "import { BgGradient } from \"./assets/bg-gradient.js\";\r\nimport { Logo } from \"./assets/logo.js\";\r\nimport { PerspectiveGrid } from \"./assets/perspective-grid.js\";\r\nimport { ShadowGradient } from \"./assets/shadow-gradient.js\";\r\nimport { StarField } from \"./assets/star-field.js\";\r\nimport type { Size } from \"./lib/abstractions.js\";\r\nimport { FrameAnimation } from \"./lib/frame-animation.js\";\r\nimport type { ILinearGradient } from \"./lib/linear-gradient.js\";\r\nimport { Timing } from \"./lib/timing.js\";\r\n\r\ninterface Bs80Assets {\r\n    bg: ILinearGradient;\r\n    starField: StarField //IAnimationFrameRenderer<[StarFieldAnimationOptions]>;\r\n    grid: PerspectiveGrid //IAnimationFrameRenderer<[PerspectiveGridAnimationOptions]>;\r\n    shadow: ILinearGradient;\r\n    logo: Logo //IAsyncAnimationFrameRenderer;\r\n}\r\n\r\nclass Bs80Animation {\r\n\r\n    constructor(containerOrSelector: HTMLElement | string, ...size: Size) {\r\n\r\n        const container = typeof containerOrSelector === \"string\" ? document.querySelector<HTMLElement>(containerOrSelector) : containerOrSelector;\r\n        if (!container) {\r\n            throw new Error(\"Invali container argument\");\r\n        }\r\n        this.container = container;\r\n\r\n        const [w, h] = this.size = this.getContainerSize();\r\n\r\n        this.ctx = this.appendCanvas(...this.size);\r\n\r\n        this.assets = {\r\n            bg: new BgGradient(),\r\n            shadow: new ShadowGradient(),\r\n            starField: new StarField({\r\n                size: this.size,\r\n                patternSizeFactor: 0.5,\r\n                starCount: 360,\r\n                starScaling: 1,\r\n                color: \"rgb(255 255 255 / .6)\"\r\n            }),\r\n            grid: new PerspectiveGrid({\r\n                // size: [960, 540]\r\n                size: this.size,\r\n                viewDistance: 26,\r\n                gridSize: 23,\r\n                angle: 285,\r\n                fieldOfView: h / 2,\r\n                lineScaling: 1\r\n            }),\r\n            logo: new Logo({\r\n                url: \"./images/bare_saa_80_logo_nobg.svg\",\r\n                size: [w, h]\r\n            })\r\n        };\r\n\r\n        this.ctorPromise = this.assets.logo.initAsync();\r\n\r\n    }\r\n\r\n    private readonly ctorPromise: Promise<any>;\r\n    private readonly container: HTMLElement;\r\n\r\n    private readonly assets: Bs80Assets;\r\n    ctx: CanvasRenderingContext2D;\r\n    size: Size;\r\n\r\n    private appendCanvas(width: number, height: number): CanvasRenderingContext2D {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        this.container.appendChild(canvas);\r\n        const ctx = canvas.getContext(\"2d\")!;\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = \"high\";\r\n\r\n        return ctx;\r\n    }\r\n\r\n    private getContainerSize(): Size {\r\n        return [window.innerWidth, window.innerHeight];\r\n    }\r\n\r\n    private readonly onWindowResize: (e: Event) => void = e => {\r\n        Timing.debounce(async () => {\r\n            const a = this.assets;\r\n            if (a) {\r\n                await Timing.delayAsync(200);\r\n                const size = this.getContainerSize();\r\n                const [, h] = this.size = a.grid.size = a.logo.size = a.starField.size = [this.ctx.canvas.width, this.ctx.canvas.height] = size;\r\n                a.grid.fieldOfView = h / 2;\r\n            }\r\n        }, 250);\r\n    };\r\n\r\n    async startAnimation(): Promise<void> {\r\n\r\n        await this.ctorPromise;\r\n\r\n        window.addEventListener(\"resize\", this.onWindowResize);\r\n\r\n        const { bg, shadow, starField, grid, logo } = this.assets;\r\n\r\n        const renderStarFieldFrame = starField.createFrameRenderer(this.ctx, {\r\n            rotateDegPerSecond: -3,\r\n            rotateCenterFactors: [0.5, 0.65]\r\n        });\r\n\r\n        const renderGridFrame = grid.createFrameRenderer(this.ctx, {\r\n            horStrokeStyle: \"rgb(97 161 172 / .42)\",\r\n            verStrokeStyle: \"rgb(255 255 255 / .15)\",\r\n            gridRowsPerSecond: 2,\r\n            rotateDegPerSecond: 0,\r\n            skipClear: true\r\n        });\r\n\r\n        const renderLogoFrame = logo.createFrameRenderer(this.ctx);\r\n\r\n        const logoAnimationStartTime = 3_000;\r\n\r\n        const animation = new FrameAnimation(time => {\r\n\r\n            const ctx = this.ctx;\r\n            const [w, h] = this.size;\r\n\r\n            let hasMoreFrames = true;\r\n\r\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n            // Render opaque background gradient\r\n            bg.render(ctx, false, 0, 0, w, h);\r\n\r\n            hasMoreFrames = renderStarFieldFrame(time);\r\n\r\n            // Position and render bottom grid\r\n            ctx.save();\r\n            ctx.translate(0, h / 4.25);\r\n            hasMoreFrames = renderGridFrame(time);\r\n            ctx.restore();\r\n\r\n            // Rotate, position and render top grid\r\n            ctx.save();\r\n            ctx.rotate(Math.PI);\r\n            ctx.translate(-w, h * -1.06);\r\n            hasMoreFrames = renderGridFrame(time);\r\n            ctx.restore();\r\n\r\n            // Render partly transparent overlay gradient\r\n            //bgGradient.render(ctx, true, 0, 0, w, h);\r\n            shadow.render(ctx, true, 0, 0, w, h);\r\n\r\n            if (time > logoAnimationStartTime) {\r\n                renderLogoFrame(time - logoAnimationStartTime);\r\n            }\r\n\r\n            return hasMoreFrames;\r\n\r\n        });\r\n\r\n        animation.start();\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\r\nnew Bs80Animation(document.body, window.innerWidth, window.innerHeight).startAnimation();\r\n\r\n"],
  "mappings": "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",
  "names": ["Easing", "Calc", "Timing"]
}
