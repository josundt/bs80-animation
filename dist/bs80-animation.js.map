{
  "version": 3,
  "sources": ["../src/bs80-animation.ts"],
  "sourcesContent": ["import { BgGradient } from \"./assets/bg-gradient.js\";\r\nimport { Logo } from \"./assets/logo.js\";\r\nimport { PerspectiveGrid } from \"./assets/perspective-grid.js\";\r\nimport { ShadowGradient } from \"./assets/shadow-gradient.js\";\r\nimport { Starfield } from \"./assets/starfield.js\";\r\nimport type { Size } from \"./lib/abstractions.js\";\r\nimport { FrameAnimation } from \"./lib/frame-animation.js\";\r\nimport type { ILinearGradient } from \"./lib/linear-gradient.js\";\r\nimport { Timing } from \"./lib/timing.js\";\r\n\r\ninterface Bs80Assets {\r\n    bg: ILinearGradient;\r\n    starField: Starfield //IAnimationFrameRenderer<[StarFieldAnimationOptions]>;\r\n    grid: PerspectiveGrid //IAnimationFrameRenderer<[PerspectiveGridAnimationOptions]>;\r\n    shadow: ILinearGradient;\r\n    logo: Logo //IAsyncAnimationFrameRenderer;\r\n}\r\n\r\nexport class Bs80Animation {\r\n\r\n    constructor(containerOrSelector: HTMLElement | string, private readonly getSize: () => Size) {\r\n\r\n        const container = typeof containerOrSelector === \"string\" ? document.querySelector<HTMLElement>(containerOrSelector) : containerOrSelector;\r\n        if (!container) {\r\n            throw new Error(\"Invali container argument\");\r\n        }\r\n        this.container = container;\r\n\r\n        const [w, h] = this.size = getSize();\r\n\r\n        this.ctx = this.appendCanvas(...this.size);\r\n\r\n        this.assets = {\r\n            bg: new BgGradient(),\r\n            shadow: new ShadowGradient(),\r\n            starField: new Starfield({\r\n                size: this.size,\r\n                patternSizeFactor: 0.5,\r\n                starCount: 360,\r\n                starScaling: 1,\r\n                color: \"rgb(255 255 255 / .6)\"\r\n            }),\r\n            grid: new PerspectiveGrid({\r\n                // size: [960, 540]\r\n                size: this.size,\r\n                viewDistance: 26,\r\n                gridSize: 23,\r\n                angle: 285,\r\n                fieldOfView: h / 2,\r\n                lineScaling: 1\r\n            }),\r\n            logo: new Logo({\r\n                url: \"./images/bare_saa_80_logo_nobg.svg\",\r\n                size: [w, h]\r\n            })\r\n        };\r\n\r\n        this.ctorPromise = this.assets.logo.initAsync();\r\n\r\n    }\r\n\r\n    private readonly ctorPromise: Promise<any>;\r\n    private readonly container: HTMLElement;\r\n\r\n    private readonly assets: Bs80Assets;\r\n    ctx: CanvasRenderingContext2D;\r\n    size: Size;\r\n\r\n    private appendCanvas(width: number, height: number): CanvasRenderingContext2D {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        this.container.appendChild(canvas);\r\n        const ctx = canvas.getContext(\"2d\")!;\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = \"high\";\r\n\r\n        return ctx;\r\n    }\r\n\r\n    private readonly onWindowResize: (e: Event) => void = e => {\r\n        Timing.debounce(async () => {\r\n            const a = this.assets;\r\n            if (a) {\r\n                await Timing.delayAsync(200);\r\n                const size = this.getSize();\r\n                const [, h] = this.size = a.grid.size = a.logo.size = a.starField.size = [this.ctx.canvas.width, this.ctx.canvas.height] = size;\r\n                a.grid.fieldOfView = h / 2;\r\n            }\r\n        }, 250);\r\n    };\r\n\r\n    async start(): Promise<void> {\r\n\r\n        await this.ctorPromise;\r\n\r\n        window.addEventListener(\"resize\", this.onWindowResize);\r\n\r\n        const { bg, shadow, starField, grid, logo } = this.assets;\r\n\r\n        const renderStarFieldFrame = starField.createFrameRenderer(this.ctx, {\r\n            rotateDegPerSecond: -3,\r\n            rotateCenterFactors: [0.5, 0.65]\r\n        });\r\n\r\n        const renderGridFrame = grid.createFrameRenderer(this.ctx, {\r\n            horStrokeStyle: \"rgb(97 161 172 / .42)\",\r\n            verStrokeStyle: \"rgb(255 255 255 / .15)\",\r\n            gridRowsPerSecond: 2,\r\n            rotateDegPerSecond: 0,\r\n            skipClear: true\r\n        });\r\n\r\n        const renderLogoFrame = logo.createFrameRenderer(this.ctx);\r\n\r\n        const logoAnimationStartTime = 3_000;\r\n\r\n        const animation = new FrameAnimation(time => {\r\n\r\n            const ctx = this.ctx;\r\n            const [w, h] = this.size;\r\n\r\n            let hasMoreFrames = true;\r\n\r\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n            // Render opaque background gradient\r\n            bg.render(ctx, false, 0, 0, w, h);\r\n\r\n            hasMoreFrames = renderStarFieldFrame(time);\r\n\r\n            // Position and render bottom grid\r\n            ctx.save();\r\n            ctx.translate(0, h / 4.25);\r\n            hasMoreFrames = renderGridFrame(time);\r\n            ctx.restore();\r\n\r\n            // Rotate, position and render top grid\r\n            ctx.save();\r\n            ctx.rotate(Math.PI);\r\n            ctx.translate(-w, h * -1.06);\r\n            hasMoreFrames = renderGridFrame(time);\r\n            ctx.restore();\r\n\r\n            // Render partly transparent overlay gradient\r\n            //bgGradient.render(ctx, true, 0, 0, w, h);\r\n            shadow.render(ctx, true, 0, 0, w, h);\r\n\r\n            if (time > logoAnimationStartTime) {\r\n                renderLogoFrame(time - logoAnimationStartTime);\r\n            }\r\n\r\n            return hasMoreFrames;\r\n\r\n        });\r\n\r\n        animation.start();\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["BgGradient", "Logo", "PerspectiveGrid", "ShadowGradient", "Starfield", "FrameAnimation", "Timing", "Bs80Animation", "containerOrSelector", "getSize", "e", "a", "size", "h", "container", "w", "width", "height", "canvas", "ctx", "bg", "shadow", "starField", "grid", "logo", "renderStarFieldFrame", "renderGridFrame", "renderLogoFrame", "logoAnimationStartTime", "time", "hasMoreFrames"]
}
