{
  "version": 3,
  "sources": ["../../src/assets/starfield.ts"],
  "sourcesContent": ["import type { CanvasStrokeOrFillStyle, IAnimationFrameRenderer, Size } from \"../lib/abstractions.js\";\r\nimport { Calc } from \"../lib/calc.js\";\r\n\r\ntype Star = [x: number, y: number, radius: number];\r\n\r\nexport interface StarfieldConfiguration {\r\n    starCount: number;\r\n    size: Size;\r\n    color: CanvasStrokeOrFillStyle;\r\n    patternSizeFactor?: number;\r\n    starScaling?: number;\r\n}\r\n\r\nexport type StarfieldOptions = Readonly<StarfieldConfiguration>;\r\n\r\nexport interface StarfieldAnimationOptions {\r\n    rotateDegPerSecond: number;\r\n    rotateCenterFactors?: [horCenterFactor: number, verCenterFactor: number];\r\n}\r\n\r\ninterface AnimationState {\r\n    ctx: CanvasRenderingContext2D;\r\n    pattern: CanvasPattern;\r\n}\r\n\r\n\r\nexport class Starfield implements IAnimationFrameRenderer<[StarfieldAnimationOptions]> {\r\n\r\n    constructor(\r\n        options: StarfieldOptions\r\n    ) {\r\n        this.config = {\r\n            patternSizeFactor: 0.5,\r\n            starScaling: 1,\r\n            ...options\r\n        };\r\n        this.origSize = [...options.size];\r\n        this.stars = Starfield.createStars(this.config, this.patternSize);\r\n    }\r\n\r\n    private readonly config: Required<StarfieldConfiguration>;\r\n    private readonly stars: Star[];\r\n    private readonly origSize: Size;\r\n    private animationState?: AnimationState;\r\n\r\n    private get patternSize(): Size {\r\n        const [w, h] = this.size;\r\n        return [w * this.config.patternSizeFactor, h * this.config.patternSizeFactor];\r\n    }\r\n\r\n    get scaling(): [horScaleFactor: number, verScaleFactor: number] {\r\n        return [this.size[0] / this.origSize[0], this.size[1] / this.origSize[1]];\r\n    }\r\n\r\n    get size(): Size {\r\n        return this.config.size;\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = [...value];\r\n        if (this.animationState) {\r\n            this.animationState.pattern = this.createPattern(this.animationState.ctx);\r\n        }\r\n    }\r\n\r\n    private static createStars(config: Required<StarfieldConfiguration>, size: Size): Star[] {\r\n        const result: Star[] = [];\r\n        const [pW, pH] = size;\r\n        for (let i = 0; i < config.starCount; ++i) {\r\n            const x = Math.random() * pW;\r\n            const y = Math.random() * pH;\r\n            const radius = Math.random() * (Calc.avg(...config.size) * 0.001 * config.starScaling);\r\n            result.push([x, y, radius]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static renderStars(stars: Star[], ctx: CanvasRenderingContext2D, color: CanvasStrokeOrFillStyle): void {\r\n        for (const s of stars) {\r\n            ctx.beginPath();\r\n            ctx.arc(...s, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = color;\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    createPattern(ctx: CanvasRenderingContext2D): CanvasPattern {\r\n        const canvas = document.createElement(\"canvas\");\r\n        [canvas.width, canvas.height] = this.patternSize;\r\n        const patternCtx = canvas.getContext(\"2d\")!;\r\n        patternCtx.scale(...this.scaling);\r\n        Starfield.renderStars(this.stars, patternCtx, this.config.color);\r\n        // patternCtx.canvas.toBlob(b => {\r\n        //     const oUrl = URL.createObjectURL(b!);\r\n        //     const a = document.createElement(\"a\");\r\n        //     a.setAttribute(\"download\", \"image.png\");\r\n        //     a.setAttribute(\"href\", oUrl);\r\n        //     a.click();\r\n        //     URL.revokeObjectURL(oUrl);\r\n        // }, \"image/png\");\r\n        return ctx.createPattern(canvas, \"repeat\")!;\r\n    }\r\n\r\n    createFrameRenderer(ctx: CanvasRenderingContext2D, options: StarfieldAnimationOptions): (time: number) => boolean {\r\n        const radPerSecond = options.rotateDegPerSecond * (Math.PI / 180);\r\n        this.animationState = {\r\n            ctx: ctx,\r\n            pattern: this.createPattern(ctx)\r\n        };\r\n        const [horCenterFactor, verCenterFactor] = options.rotateCenterFactors ?? [0.5, 0.65];\r\n        return time => {\r\n            const rotatation = ((time / 1000) * radPerSecond) % (Math.PI * 2);\r\n            const [w, h] = this.size;\r\n            ctx.save();\r\n            ctx.translate(w * horCenterFactor, h * verCenterFactor);\r\n            ctx.rotate(rotatation);\r\n\r\n            ctx.beginPath();\r\n\r\n            const hemisphereRadius = Math.sqrt(\r\n                ((w * Math.max(horCenterFactor, 1 - horCenterFactor)) ** 2) +\r\n                ((h * Math.max(verCenterFactor, 1 - verCenterFactor)) ** 2)\r\n            );\r\n\r\n            ctx.arc(0, 0, hemisphereRadius, 0, 2 * Math.PI);\r\n\r\n            // ctx.scale(...this.scaling);\r\n            ctx.fillStyle = this.animationState!.pattern;\r\n            ctx.fill();\r\n\r\n            ctx.strokeStyle = \"#FFF\";\r\n            ctx.stroke();\r\n\r\n            ctx.restore();\r\n            return true;\r\n        };\r\n    }\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": ["Calc", "Starfield", "options", "w", "h", "value", "config", "size", "result", "pW", "pH", "x", "y", "radius", "stars", "ctx", "color", "s", "canvas", "patternCtx", "_a", "radPerSecond", "horCenterFactor", "verCenterFactor", "time", "rotatation", "hemisphereRadius"]
}
