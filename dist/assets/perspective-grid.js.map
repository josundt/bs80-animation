{
  "version": 3,
  "sources": ["../../src/assets/perspective-grid.ts"],
  "sourcesContent": ["import type { CanvasStrokeOrFillStyle, IAnimationFrameRenderer, Line, Point, Size } from \"../lib/abstractions.js\";\r\nimport { Calc } from \"../lib/calc.js\";\r\nimport { FrameAnimation, type IFrameAnimation } from \"../lib/frame-animation.js\";\r\n\r\nexport interface PerspectiveGridConfiguration {\r\n    size: Size;\r\n    /** Field of view kind of the lense, smaller values = spheric */\r\n    fieldOfView: number;\r\n    /** view distance, higher values = further away */\r\n    viewDistance: number;\r\n    /** grid angle */\r\n    angle: number;\r\n    /** grid size in Cartesian */\r\n    gridSize: number;\r\n\r\n    lineScaling?: number;\r\n}\r\n\r\nexport type PerspectiveGridOptions = Partial<Readonly<PerspectiveGridConfiguration>>;\r\n\r\nexport interface PerspectiveGridRenderOptions {\r\n    horStrokeStyle: CanvasStrokeOrFillStyle;\r\n    verStrokeStyle: CanvasStrokeOrFillStyle;\r\n}\r\n\r\nexport interface PerspectiveGridAnimationOptions extends PerspectiveGridRenderOptions {\r\n    gridRowsPerSecond?: number;\r\n    rotateDegPerSecond?: number;\r\n    skipClear?: boolean;\r\n}\r\n\r\nexport class PerspectiveGrid implements IAnimationFrameRenderer<[options: PerspectiveGridAnimationOptions]> {\r\n\r\n    constructor(options?: PerspectiveGridOptions) {\r\n        this.config = {\r\n            ...this.getDefaultOptions(),\r\n            ...(options ?? {})\r\n        };\r\n        this.createVerticalLines();\r\n        this.createHorizontalLines();\r\n    }\r\n\r\n    private readonly config: Required<PerspectiveGridConfiguration>;\r\n    private readonly horizontalLines: Line[] = [];\r\n    private readonly verticalLines: Line[] = [];\r\n\r\n    private get center(): Point {\r\n        const [w, h] = this.size;\r\n        return [w / 2, h / 2];\r\n    }\r\n\r\n    private get lineWidth(): number {\r\n        return Calc.avg(...this.config.size) * 0.001 * this.config.lineScaling;\r\n    }\r\n\r\n    private getDefaultOptions(): Readonly<Required<PerspectiveGridConfiguration>> {\r\n        return {\r\n            size: [960, 540],\r\n            fieldOfView: 512,\r\n            viewDistance: 12,\r\n            angle: -75,\r\n            gridSize: 12,\r\n            lineScaling: 1\r\n        };\r\n    }\r\n\r\n    private rotateX(...point: Point): Point {\r\n        let [x, y] = point;\r\n        const { angle, fieldOfView, viewDistance } = this.config;\r\n        const rd = angle * Math.PI / 180; /// convert angle into radians\r\n        const ca = Math.cos(rd);\r\n        const sa = Math.sin(rd);\r\n\r\n        const ry = y * ca; /// convert y value as we are rotating\r\n        const rz = y * sa; /// only around x. Z will also change\r\n\r\n        /// Project the new coords into screen coords\r\n        const f = fieldOfView / (viewDistance + rz);\r\n        x = x * f + this.center[0];\r\n        y = ry * f + this.center[1];\r\n\r\n        return [x, y];\r\n    }\r\n\r\n    private createVerticalLines(): void {\r\n        const { gridSize } = this.config;\r\n\r\n        let p1: Point;\r\n        let p2: Point;\r\n\r\n        this.verticalLines.splice(0);\r\n\r\n        for (let i = -gridSize; i <= gridSize; i++) {\r\n            p1 = this.rotateX(i, -gridSize);\r\n            p2 = this.rotateX(i, gridSize);\r\n            this.verticalLines.push([p1, p2]);\r\n        }\r\n    }\r\n\r\n    private createHorizontalLines(movePercent: number = 0): void {\r\n        const { gridSize } = this.config;\r\n\r\n        let p1: Point;\r\n        let p2: Point;\r\n\r\n        this.horizontalLines.splice(0);\r\n\r\n        for (let i = -gridSize; i <= gridSize; i++) {\r\n            p1 = this.rotateX(-gridSize, i + (movePercent / 100));\r\n            p2 = this.rotateX(gridSize, i + (movePercent / 100));\r\n\r\n            // if (movePercent) {\r\n            //     const nextP1 = this.rotateX(-gridSize, i + 1);\r\n            //     const [,nextY1] = nextP1;\r\n            //     const [,y1] = p1;\r\n            //     const diff = nextY1 - y1;\r\n            //     const newY1 = y1 + (diff * (movePercent / 100));\r\n            //     p1 = [p1[0], newY1];\r\n            //     p2 = [p2[0], newY1];\r\n            // }\r\n\r\n            this.horizontalLines.push([p1, p2]);\r\n        }\r\n    }\r\n\r\n    private drawCanvasLine(ctx: CanvasRenderingContext2D, line: Line, strokeStyle: string | CanvasGradient | CanvasPattern): void {\r\n        const [p1, p2] = line;\r\n        ctx.save();\r\n        ctx.lineWidth = this.lineWidth;\r\n        ctx.beginPath();\r\n        ctx.moveTo(...p1);\r\n        ctx.lineTo(...p2);\r\n        ctx.strokeStyle = strokeStyle;\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    private toSvgLine(l: Line, strokeStyle: string, indent: string = \"  \"): string {\r\n        const [[x1, y1], [x2, y2]] = l;\r\n        return `${indent}<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"${strokeStyle}\"/>`;\r\n    }\r\n\r\n    get size(): Size {\r\n        return [...this.config.size];\r\n    }\r\n    set size(value: Size) {\r\n        this.config.size = value;\r\n    }\r\n\r\n    get angle(): number {\r\n        return this.config.angle;\r\n    }\r\n    set angle(value: number) {\r\n        this.config.angle = value;\r\n    }\r\n\r\n    get fieldOfView(): number {\r\n        return this.config.fieldOfView;\r\n    }\r\n    set fieldOfView(value: number) {\r\n        this.config.fieldOfView = value;\r\n    }\r\n\r\n    renderToCanvas(ctx: CanvasRenderingContext2D, options: PerspectiveGridRenderOptions, clear?: boolean): void {\r\n        if (clear) {\r\n            ctx.clearRect(0, 0, ...this.size);\r\n        }\r\n        for (const l of this.verticalLines) {\r\n            this.drawCanvasLine(ctx, l, options.verStrokeStyle);\r\n        }\r\n        for (const l of this.horizontalLines) {\r\n            this.drawCanvasLine(ctx, l, options.horStrokeStyle);\r\n        }\r\n    }\r\n\r\n    toSvg(options: PerspectiveGridRenderOptions): string {\r\n        const [w, h] = this.size;\r\n        return [\r\n            `<svg width=\"${w}\" height=\"${h}\" xmlns=\"http://www.w3.org/2000/svg\">`,\r\n            ...this.verticalLines.map(l => this.toSvgLine(l, options.verStrokeStyle as string)),\r\n            ...this.horizontalLines.map(l => this.toSvgLine(l, options.horStrokeStyle as string)),\r\n            \"</svg>\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    createFrameRenderer(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: PerspectiveGridAnimationOptions\r\n    ): (time: DOMHighResTimeStamp) => boolean {\r\n        let rowMovePercent = 0;\r\n        let lastTime = 0;\r\n        let rowCounter = 0;\r\n        return (time: DOMHighResTimeStamp) => {\r\n\r\n            const timeDelta = time - lastTime;\r\n            const rotateDegDelta = (timeDelta / 1000) * (options.rotateDegPerSecond ?? 0);\r\n            this.angle += rotateDegDelta % 360;\r\n            let hasMoreFrames = true;\r\n            lastTime = time;\r\n            // const timeDeltaSeconds = timeDelta / 1_000;\r\n\r\n            const movePercentDelta = timeDelta * (options.gridRowsPerSecond ?? 3) / 10;\r\n            this.createVerticalLines();\r\n            this.createHorizontalLines(rowMovePercent);\r\n            this.renderToCanvas(ctx, options, !options.skipClear);\r\n            if (rowMovePercent + movePercentDelta >= 100) {\r\n                rowCounter++;\r\n            }\r\n            if (rowCounter /*> 3*/ < 0) {\r\n                hasMoreFrames = false;\r\n            }\r\n            rowMovePercent = (rowMovePercent + movePercentDelta) % 100;\r\n            return hasMoreFrames;\r\n        };\r\n\r\n    }\r\n\r\n    private canvasAnimation: IFrameAnimation | null = null;\r\n\r\n    startCanvasAnimation(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: PerspectiveGridAnimationOptions,\r\n        onStopped?: () => void\r\n    ): boolean {\r\n        this.canvasAnimation = new FrameAnimation(this.createFrameRenderer(\r\n            ctx,\r\n            options\r\n        ), onStopped);\r\n        return this.canvasAnimation.start();\r\n    }\r\n\r\n    stopCanvasAnimation(): boolean {\r\n        return this.canvasAnimation?.stop() ?? false;\r\n    }\r\n\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["Calc", "FrameAnimation", "PerspectiveGrid", "options", "w", "h", "point", "x", "y", "angle", "fieldOfView", "viewDistance", "rd", "ca", "sa", "ry", "rz", "f", "gridSize", "p1", "p2", "i", "movePercent", "ctx", "line", "strokeStyle", "l", "indent", "x1", "y1", "x2", "y2", "value", "clear", "rowMovePercent", "lastTime", "rowCounter", "time", "_a", "_b", "timeDelta", "rotateDegDelta", "hasMoreFrames", "movePercentDelta", "onStopped"]
}
